using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Euler
{
    /// <summary>
    /// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
    /// 
    /// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
    /// 
    /// Let us list the factors of the first seven triangle numbers:
    /// 
    ///  1: 1
    ///  3: 1,3
    ///  6: 1,2,3,6
    /// 10: 1,2,5,10
    /// 15: 1,3,5,15
    /// 21: 1,3,7,21
    /// 28: 1,2,4,7,14,28
    /// We can see that 28 is the first triangle number to have over five divisors.
    /// 
    /// What is the value of the first triangle number to have over five hundred divisors?
    /// </summary>
    public class Task12
    {
        private long GetTriangle(int triangleNumber) => triangleNumber * (triangleNumber + 1) / 2;

        private List<int> GetPrimePowers(long number)
        {
            long copyNumber = number;
            var primePowers = new List<int>();
            for (int i = 2; i <= copyNumber; ++i)
            {
                int power = 0;
                while (copyNumber % i == 0)
                {
                    power++;
                    copyNumber /= i;
                }
                if (power > 0)
                {
                    primePowers.Add(power);
                }
            }
            return primePowers;
        }

        /* We find all the primes in a number and their occurrence
         * Then we can find count of factors by multiplying their powers + 1
         * 28: 2^2, 7^1 => (2+1)*(1+1) = 6
         * 6: 2^1, 3^1 => (1+1)*(1+1) = 4
        */
        private int GetFactorsCount(long number)
        {
            List<int> powers = GetPrimePowers(number);
            int count = 1;
            foreach (int power in powers)
            {
                count *= (power + 1);
            }

            return count;
        }

        
        public long Run(int numberOfDivisors)
        {
            int triangleNumber = 1;
            while (true)
            {
                long triangle = GetTriangle(triangleNumber++);
                int factorsCount = GetFactorsCount(triangle);
                if (factorsCount > numberOfDivisors)
                {
                    return triangle;
                }
            }
        }
    }
}
